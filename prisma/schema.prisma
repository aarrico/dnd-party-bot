generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SessionStatus {
  ACTIVE
  COMPLETED
  CANCELED
}

enum RoleType {
  GAME_MASTER
  TANK
  SUPPORT
  RANGE_DPS
  MELEE_DPS
  FACE
  CONTROL
}

model Guild {
  id        String   @id
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  campaigns Campaign[]
  members   GuildMember[]

  @@map("guild")
}

// discord channel with channel type GUILD_CATEGORY
model Campaign {
  id        String   @id // discord channel id
  name      String   @unique
  active    Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  guildId String @map("guild_id")
  guild   Guild  @relation(fields: [guildId], references: [id], onDelete: Cascade)

  sessions Session[]

  @@unique([guildId, active], name: "one_active_campaign_per_guild", map: "one_active_campaign_per_guild_index")
  @@map("campaign")
}

// discord channel with channel type GUILD_TEXT
model Session {
  id         String   @id // discord channel id
  campaignId String   @map("campaign_id")
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  name       String
  date       DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  partyMembers PartyMember[]

  @@map("session")
}

model User {
  id        String @id
  channelId String @unique
  username  String @unique

  sessions PartyMember[]
  guilds   GuildMember[]

  @@map("user")
}

model GuildMember {
  guildId String @map("guild_id")
  guild   Guild  @relation(fields: [guildId], references: [id], onDelete: Cascade)
  userId  String @map("user_id")
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")

  @@id([guildId, userId], name: "guild_member_id")
  @@map("guild_member")
}

model PartyMember {
  sessionId String   @map("session_id")
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId    RoleType @map("role_id")
  role      Role     @relation(fields: [roleId], references: [id])

  @@id(fields: [sessionId, userId], name: "party_member_id")
  @@map("party_member")
}

model Role {
  id          RoleType      @id
  emojiId     String        @map("emoji_id")
  displayName String        @default("") @map("display_name")
  imagePath   String        @default("") @map("image_path")
  description String?       @map("description")
  PartyMember PartyMember[]

  @@map("role")
}
