# BUILD STAGE
FROM node:24-alpine AS build

WORKDIR /usr/src/app

# Copy package files first for better caching
COPY package.json package-lock.json ./
COPY prisma ./prisma

# Install dependencies
RUN npm ci && npm cache clean --force

# Copy source code and build configuration
COPY config/tsconfig.json ./config/tsconfig.json
COPY src ./src

# Build the application
RUN npx prisma generate && npx tsc --project config/tsconfig.json

# PRODUCTION STAGE
FROM node:24-alpine AS production

WORKDIR /usr/src/app

# Install system dependencies
RUN apk add --no-cache fontconfig openssl

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S partybot -u 1001

# Copy built application and production dependencies
COPY --from=build --chown=partybot:nodejs /usr/src/app/dist ./dist
COPY --from=build --chown=partybot:nodejs /usr/src/app/node_modules ./node_modules
COPY --from=build --chown=partybot:nodejs /usr/src/app/package.json ./package.json
COPY --chown=partybot:nodejs prisma ./prisma

# Install and configure Vecna font
COPY resources/fonts/*.ttf /usr/share/fonts/truetype/
RUN fc-cache -f -v

# Switch to non-root user
USER partybot

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=40s --retries=3 \
    CMD node -e "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })" || exit 1

CMD ["npm", "run", "start:migrate:dev"]
